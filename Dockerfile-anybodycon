#syntax=docker/dockerfile:1.4

ARG ANYBODY_VERSION="8.0"
ARG ANYBODY_VERSION_PATCH="0"
ARG ANYBODY_VERSION_SUFFIX=""

ARG BASE_IMAGE="debian"

ARG DISTRO="debian"
ARG DISTRO_VERSION="bullseye"
ARG TAG="${DISTRO_VERSION}-20230411-slim"
ARG WINECHANNEL="stable"
ARG WINEVERSION="4.0.4~${DISTRO_VERSION}"


## Configure to use container build store which has the files from AnyBody 
FROM ${BASE_IMAGE}:${TAG} AS anybody-build-store
ARG ANYBODY_VERSION
ARG ANYBODY_VERSION_SUFFIX
ARG ANYBODY_VERSION_PATCH
RUN apt-get update && apt-get install -y --no-install-recommends wget unzip ca-certificates
RUN wget -nc https://anybodycloudci.blob.core.windows.net/windows-anybodycon/anybody-minimal-${ANYBODY_VERSION}.${ANYBODY_VERSION_PATCH}${ANYBODY_VERSION_SUFFIX}.zip
RUN unzip anybody-minimal-${ANYBODY_VERSION}.${ANYBODY_VERSION_PATCH}${ANYBODY_VERSION_SUFFIX}.zip
RUN wget -nc https://anybodycloudci.blob.core.windows.net/windows-anybodycon/anybody-${ANYBODY_VERSION}-minimal-python.tar.gz
RUN tar -xzf anybody-${ANYBODY_VERSION}-minimal-python.tar.gz


# Run an intermediate docker step to get the Wine apt sources/keys, and build 
# a dummy wine-stable-i386 package to shawdows the 32bit dependency.
FROM ${BASE_IMAGE}:${TAG} AS build-base
ARG WINECHANNEL
ARG DISTRO
ARG DISTRO_VERSION
ARG WINEVERSION
ARG ANYBODY_VERSION
ARG ANYBODY_VERSION_SUFFIX
ARG ANYBODY_VERSION_PATCH

SHELL ["/bin/bash", "-c"]

USER root
# Get the necessary apt list and keys to install from winehq
RUN apt-get update \
    && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
        gnupg software-properties-common equivs wget \
    && wget -nc https://dl.winehq.org/wine-builds/winehq.key \
    && mv winehq.key /usr/share/keyrings/winehq-archive.key \
    && mkdir -pm755 /etc/apt/keyrings \
    && cp /usr/share/keyrings/winehq-archive.key /etc/apt/keyrings/winehq-archive.key \
    && wget -nc https://dl.winehq.org/wine-builds/${DISTRO}/dists/${DISTRO_VERSION}/winehq-${DISTRO_VERSION}.sources \
    && mv winehq-${DISTRO_VERSION}.sources /etc/apt/sources.list.d/ 
# Build a fake wine-stable-i386 deb package so we can install wine without 32 bit
COPY wine-xxx-i386 /wine-${WINECHANNEL}-i386
RUN sed -i 's/{{WINEVERSION}}/'${WINEVERSION}'/g' /wine-${WINECHANNEL}-i386 
RUN sed -i 's/{{WINECHANNEL}}/'${WINECHANNEL}'/g' /wine-${WINECHANNEL}-i386 

RUN equivs-build /wine-${WINECHANNEL}-i386





FROM ${BASE_IMAGE}:${TAG}

SHELL ["/bin/bash", "-c"]

ARG WINEVERSION
ARG WINECHANNEL
ARG ANYBODY_VERSION
ARG ANYBODY_VERSION_SUFFIX
ARG ANYBODY_VERSION_PATCH

ARG ANYBODY_USER=anybodyuser
ARG ANYBODY_USER_ID=1000
ARG ANYBODY_USER_GID=1000


# Change the default uid:gid to be easily compatible with github actions
USER root

RUN apt update && apt install -y sudo curl tar 

RUN if [ ! $(getent group "${ANYBODY_USER_GID}") ]; then \
       groupadd -g "${ANYBODY_USER_GID}" "${ANYBODY_USER}"; \
    fi

RUN if [ ! $(getent passwd "${ANYBODY_USER_ID}") ]; then \
       useradd -u "${ANYBODY_USER_ID}" -g "${ANYBODY_USER_GID}" -m -s /bin/bash "${ANYBODY_USER}"; \
    fi

RUN  echo "${ANYBODY_USER} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers



# ## Make sure apt installs stuff in noninteractive mode 
# ENV DEBIAN_FRONTEND noninteractive
# ENV DEBCONF_NONINTERACTIVE_SEEN true
# ## preesed tzdata, update package index, upgrade packages and install needed software
# RUN truncate -s0 /tmp/preseed.cfg; \
#     echo "tzdata tzdata/Areas select Europe" >> /tmp/preseed.cfg; \
#     echo "tzdata tzdata/Zones/Europe select Copenhagen" >> /tmp/preseed.cfg; \
#     debconf-set-selections /tmp/preseed.cfg && \
#     rm -f /etc/timezone /etc/localtime && \
#     apt-get update && \
#     apt-get install --no-install-recommends --no-upgrade -y tzdata

ENV WINEPREFIX=/wine


COPY --from=build-base /wine-${WINECHANNEL}-i386_${WINEVERSION}_all.deb /tmp/
# COPY --from=build-base /etc/apt/trusted.gpg  /etc/apt/trusted.gpg
# COPY --from=build-base /etc/apt/sources.list  /etc/apt/sources.list
COPY --from=build-base /etc/apt/sources.list.d/ /etc/apt/sources.list.d/
COPY --from=build-base /etc/apt/keyrings/winehq-archive.key /etc/apt/keyrings/winehq-archive.key
COPY --from=build-base /usr/share/keyrings/winehq-archive.key /usr/share/keyrings/winehq-archive.key

 RUN apt-get update \
    && apt-get install -y ca-certificates\
    && apt-get update \
    && dpkg -i /tmp/wine-${WINECHANNEL}-i386_${WINEVERSION}_all.deb \
    && apt-get install -y --no-install-recommends --no-upgrade wine-${WINECHANNEL}-amd64=${WINEVERSION} \
    && apt-get install -y --no-install-recommends --no-upgrade wine-${WINECHANNEL}=${WINEVERSION} \
    && ln /opt/wine-${WINECHANNEL}/bin/wine64 /opt/wine-${WINECHANNEL}/bin/wine \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


ENV PATH="/opt/wine-${WINECHANNEL}/bin:${PATH}"
ENV WINEDEBUG=-all
ENV RLM_LICENSE=5053@104.46.46.229
ENV RLM_LICENSE_PASSWORD=12345


# Only for github actions image
#RUN mkdir -p /github && chown -R $MAMBA_USER: /github


RUN mkdir -p /wine && chown -R $ANYBODY_USER: /wine && \
    echo -e '#!/bin/bash\nwine $WINEPREFIX'"/drive_c/Program\ Files/AnyBody\ Technology/AnyBody.${ANYBODY_VERSION}${ANYBODY_VERSION_SUFFIX}/AnyBodyCon.exe \"\$@\"\n" > /usr/bin/anybodycon && \
    chmod +x /usr/bin/anybodycon && chown -R $ANYBODY_USER: /usr/bin/anybodycon

USER ${ANYBODY_USER}
 
 
RUN WINEPREFIX=/wine winecfg 


COPY --from=anybody-build-store --chown=${ANYBODY_USER_ID} --link ["anybody" ,  "/wine/drive_c/Program Files/AnyBody Technology/AnyBody.${ANYBODY_VERSION}${ANYBODY_VERSION_SUFFIX}/"]


RUN /opt/wine-stable/bin/wine reg add HKCR\\AnyBody.any\\shell\\Open\\command /v "" /t REG_SZ /d "\"C:\Program Files\AnyBody Technology\AnyBody.${ANYBODY_VERSION}${ANYBODY_VERSION_SUFFIX}\AnyBody.exe\" \"%1\"" && \
    sleep 5 && \
    /opt/wine-stable/bin/wine reg add "HKLM\\SOFTWARE\\AnyBody Technology\\AnyBody.${ANYBODY_VERSION} (64-bit)${ANYBODY_VERSION_SUFFIX/_/ }" /v "InstallDir" /t REG_SZ /d "C:\Program Files\AnyBody Technology\AnyBody.${ANYBODY_VERSION}${ANYBODY_VERSION_SUFFIX}" && \
    sleep 5 && \
    rm /wine/drive_c/users/${ANYBODY_USER}/My\ Documents && \
    mkdir -p /wine/drive_c/users/${ANYBODY_USER}/My\ Documents && \
    mkdir -p /wine/drive_c/users/${ANYBODY_USER}/AppData/Local/AnyBody\ Technology/AnyBody.${ANYBODY_VERSION}.x && \
    mkdir -p /wine/drive_c/users/${ANYBODY_USER}/AppData/Roaming/AnyBody\ Technology/AnyBody.${ANYBODY_VERSION}.x && \
    mkdir -p /wine/drive_c/users/${ANYBODY_USER}/Application\ Data/AnyBody\ Technology/AnyBody.${ANYBODY_VERSION}.x && \
    mkdir -p /wine/drive_c/ProgramData/AnyBody\ Technology/AnyBody.${ANYBODY_VERSION}.x && \
    mkdir -p /wine/drive_c/users/${ANYBODY_USER}/Local\ Settings/Application\ Data/AnyBody\ Technology/AnyBody.${ANYBODY_VERSION}.x
 
#  #   ln -s /home/${ANYBODY_USER} /github/home


 
# Ensure that root can also use wine
USER root
RUN cp -R /wine/drive_c/users/${ANYBODY_USER} /wine/drive_c/users/root && \
    chown -R root /wine/drive_c/users/root && \
    mkdir /rootwine && \
    ln -s /wine/dosdevices /rootwine/dosdevices && \
    ln -s /wine/drive_c /rootwine/drive_c && \
    cp  /wine/system.reg /rootwine/system.reg && \
    cp  /wine/user.reg /rootwine/user.reg && \
    chown root /rootwine/user.reg && \
    chown root /rootwine/system.reg && \
    WINEPREFIX=/rootwine winecfg && \
    sed -i '2i export WINEPREFIX=/rootwine' /root/.profile && \
    sed -i '2i export WINEPREFIX=/rootwine' /root/.bashrc

    # THis must be moved to the mamba image
    # && \
    # sed -i '2i if [ $(id -u) = 0 ]; then export WINEPREFIX=/rootwine; fi' /usr/local/bin/_entrypoint.sh && \
    # sed -i '2i if [ $(id -u) = 0 ]; then export WINEPREFIX=/rootwine; fi' /usr/local/bin/_dockerfile_shell.sh

# SHELL ["/bin/sh", "-c"]
#echo $WINEPREFIX

# DEV CONTAINER SETUP
COPY first-run-notice.txt /usr/local/etc/vscode-dev-containers/first-run-notice.txt

RUN mkdir -p /usr/local/etc/vscode-dev-containers && \
    mkdir -p "$HOME/.config/vscode-dev-containers" && \
    touch "$HOME/.config/vscode-dev-containers/conda-notice-already-displayed"

COPY first-run-notice.txt /usr/local/etc/vscode-dev-containers/first-run-notice.txt



## SETUP PYTHON ANYBODY PYTHON ENVIRONMENT
COPY --from=anybody-build-store --chown=${ANYBODY_USER_ID} --link ["Python" ,  "/wine/drive_c/Program Files/AnyBody Technology/AnyBody.${ANYBODY_VERSION}${ANYBODY_VERSION_SUFFIX}/Python"]

# Remove _pth file to allow overwriting PYTHON environment variables etc. 
RUN rm -f /wine/drive_c/Program\ Files/AnyBody\ Technology/AnyBody.${ANYBODY_VERSION}${ANYBODY_VERSION_SUFFIX}/Python/python*._pth 
# We explicitly set the WINEPATH 'activate' the AnyBody Python environment, instead of relying on the _pth file
ENV WINEPATH=C:\\Program\ Files\\AnyBody\ Technology\\AnyBody.${ANYBODY_VERSION}${ANYBODY_VERSION_SUFFIX}\\Python;C:\\Program\ Files\\AnyBody\ Technology\\AnyBody.${ANYBODY_VERSION}${ANYBODY_VERSION_SUFFIX}\\Python\\Library\\mingw-w64\\bin;C:\\Program\ Files\\AnyBody\ Technology\\AnyBody.${ANYBODY_VERSION}${ANYBODY_VERSION_SUFFIX}\\Python\\Library\\bin;C:\\Program\ Files\\AnyBody\ Technology\\AnyBody.${ANYBODY_VERSION}${ANYBODY_VERSION_SUFFIX}\\Python\\Scripts;c:\\windows\\system32;c:\\windows;c:\\windows\\system32\\wbem
ENV PYTHONHASHSEED=1234


#INSTALL GIT
RUN apt-get update \
   && apt-get install -y --no-install-recommends --no-upgrade git \
   && apt autoremove -y \
   && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*



ENV SystemRoot=c:\\windows
ENV SystemDrive=c:

USER ${ANYBODY_USER}

RUN curl -fsSL https://pixi.sh/install.sh | bash && \
    echo 'export PATH="$PATH:$HOME/.pixi/bin"' >> ~/.bashrc







